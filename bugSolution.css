To resolve the issue, consider the following approaches:

1. **Explicit Widths:** Instead of relying on percentage-based widths, use fixed pixel widths or other units where possible. This provides more control over the element's dimensions and reduces the likelihood of unexpected behavior.

2. **Debugging Tools:** Use your browser's developer tools to inspect the element's computed styles.  This helps identify the actual calculated width and pinpoint the source of the discrepancy.

3. **Specificity:** Ensure that your CSS rules are applied in the correct order and with the appropriate specificity. Conflicting or overlapping rules can override the intended `box-sizing` effect.

4. **Avoid Percentage-Based Nesting:** If you're nesting elements with percentage-based widths, consider using alternative layout techniques or adjusting the widths to avoid cascading percentage calculations.

5. **Resetting Margins and Padding:**  Before applying `box-sizing: border-box;` explicitly reset margins and padding to `0` on the parent elements to eliminate potential conflicts.

Here's an example of a more robust approach:

```css
.container {
  width: 500px; /* Fixed width for better predictability */
  box-sizing: border-box;
  padding: 20px;
  border: 1px solid #ccc;
}

.inner {
  width: 100%; /* Width relative to its container */
  box-sizing: border-box;
  padding: 10px;
  border: 1px solid #eee;
}
```

By using fixed widths and carefully considering element nesting and specificity, you can avoid most of the unexpected width calculations associated with `box-sizing: border-box;`.